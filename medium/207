   public bool CanFinish(int numCourses, int[,] prerequisites)
        {
            //say your i/p is {{0,1},{0,2},{1,3},{1,4},{3,4}};
            // and your noOfCourses is 5.
           
            List<int>[] graph = new List<int>[numCourses];
            //create a graph of the courses for wchich this course is a prerequisite.
            for (int i = 0; i < numCourses; i++) graph[i] = new List<int>();

           //count of prereQ courses.
            int[] preCnt = new int[numCourses];

            // build graph and count of courses
            for (int i = 0; i < prerequisites.GetLength(0); i++)
            {
                int course = prerequisites[i, 0];
                int pre = prerequisites[i, 1];
                graph[pre].Add(course);
                preCnt[course]++;
            }

            // BFS ,start with courses wth 0 indegree,or 0 preReQ
            //2
       
            Queue<int> queue = new Queue<int>();
            for (int i = 0; i < numCourses; i++) if (preCnt[i] == 0) queue.Enqueue(i);

            while (queue.Count > 0)
            {
                int pre = queue.Dequeue();
                foreach (int c in graph[pre])
                {
                    if (preCnt[c] == 0) return false;
                    preCnt[c]--;
                    if (preCnt[c] == 0) queue.Enqueue(c);
                }
            }

            // all preReqs done,so return true else false,
            return preCnt.All(x => x == 0);
        }
