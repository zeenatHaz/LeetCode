/**


//Using https://medium.com/leetcode-patterns/leetcode-pattern-0-iterative-traversals-on-trees-d373568eb0ec

 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int KthSmallest(TreeNode root, int k) {
        if(root==null){
            return -1;
        }
        
        Stack<TreeNode> st=new Stack<TreeNode>();
        while(root!=null || st.Count!=0){
            
            while(root!=null){
                st.Push(root);
                root=root.left;
            }
            
            root=st.Peek();
            if(root!=null){
                st.Pop();
            }
            
            k--;
            if(k==0){
                return root.val;
            }
            
            root=root.right;
            
            
        }
        
        return -1;
    }
}
