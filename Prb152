public class Solution {
    
    int min(int x, int y) {
    return (x < y) ? x : y;
}
 
// Utility function to find a maximum of two numbers
int max(int x, int y) {
    return (x > y) ? x : y;
}
    public int MaxProduct(int[] nums) {
      // Utility function to find a minimum of two numbers

 
// Function to return the maximum product of a subarray of a given array
 // base case
    if (nums.Length == 0) {
        return 0;
    }
 
    // maintain two variables to store the maximum and minimum product
    // ending at the current index
    int max_ending = nums[0], min_ending = nums[0];
 
    // to store the maximum product subarray found so far
    int max_so_far = nums[0];
 
    // traverse the given array
    for (int i = 1; i < nums.Length; i++)
    {
        int temp = max_ending;
 
        // update the maximum product ending at the current index
        max_ending = max(nums[i], max(nums[i] * max_ending, nums[i] * min_ending));
 
        // update the minimum product ending at the current index
        min_ending = min(nums[i], min(nums[i] * temp, nums[i] * min_ending));
 
        max_so_far = max(max_so_far, max_ending);
    }
 
    // return maximum product
    return max_so_far;
    }
}
