1st Approach --Brute force. Time Complexity O(n3)


  public IList<IList<int>> ThreeSum(int[] nums) {
       List<int> arr = new List<int>();
            IList<IList<int>> arr1 = new List<IList<int>>();
            for (int i = 0; i < nums.Length; i++)
            {
                for (int j = 0; i < nums.Length; j++)
                {
                    for (int k = 0; i < nums.Length; k++)
                    {
                        if (nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k])
                        {
                            if (nums[i] + nums[j] + nums[k] == 0)
                            {
                                arr.Add(nums[i]);
                                arr.Add(nums[j]);
                                arr.Add(nums[k]);
                            }
                            arr1.Add(arr);
                            arr.Clear();

                        }
                    }
                }
            }

            return arr1;
    }
    
    
    2nd--Two pointer approach
    
    #################################
   public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
     IList<IList<int>> result = new List<IList<int>>();
            
            Array.Sort(nums);
            for(int i = 0; i < nums.Length; i++)
            {
                if (i != 0 && nums[i] == nums[i - 1]) continue;

                var start = i + 1;
                var end = nums.Length - 1;
                int j = start;
                int k = end;
                
                while(j < k)
                {
                    if (j != start && nums[j] == nums[j - 1])
                    {
                        j++;
                        continue;
                    }
                    
                    if (k != end && nums[k] == nums[k + 1])
                    {
                        k--;
                        continue;
                    }
                    
                    var sum = nums[i] + nums[j] + nums[k];
                    if (sum == 0)
                    {
                        var list = new List<int>() {nums[i], nums[j], nums[k]};
                        result.Add(list);
                        j++;
                    }
                    else if (sum > 0) k--;
                    else j++;
                }
            }

            return result;
    }
} 
    
