DFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
   public bool isBalanced = true;
    public bool IsBalanced(TreeNode root)
    {
        if (root == null)
            return true;

        GetDepth(root);
        return isBalanced;
    }

    public int GetDepth(TreeNode root)
    {
        if (root == null)
            return 0;

        int left = GetDepth(root.left);   // depth of left subtree of current root
        int right = GetDepth(root.right); // depth of right subtree of current root
          Console.WriteLine("left:"+left+"  right:"+right);
        if (Math.Abs(left - right) > 1)   // check whether the current (sub)tree is balanced or not
            isBalanced = false;

        return Math.Max(left, right) + 1; // depth of current root node
}
}
